package view;

import data.Cell;
import data.Direction;
import data.Dot;
import data.Maze;
import java.awt.Color;
import java.awt.Graphics;

public class Drawing extends javax.swing.JPanel {
    private Maze maze;
    private int zoom;
    private Color borderColor = Color.BLACK, DotColor = Color.RED, BackgroundColor = Color.LIGHT_GRAY;
    private boolean entered;
    /**
     * Creates new form Drawing
     */
    public Drawing() {
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void paint(Graphics g) {
        if (maze != null) {
            super.paintComponent(g);
            setBackground(BackgroundColor);
            int height = this.getHeight()/maze.numOfRows;
            int width = this.getWidth()/maze.numOfColumns;
            zoom = Math.min(height, width);
            g.setColor(borderColor);
            for (int row = 0; row < maze.numOfRows; row++)
                for (int column = 0; column < maze.numOfColumns; column++) {
                    Cell cell = maze.cells[row][column];
                    if (!cell.canMoveTo(Direction.UP))
                        g.drawLine(column*zoom, row*zoom, (column+1)*zoom, row*zoom);
                    if (!cell.canMoveTo(Direction.LEFT))
                        g.drawLine(column*zoom, row*zoom, column*zoom, (row+1)*zoom);
                }
            g.drawLine(0, maze.numOfRows*zoom, maze.numOfColumns*zoom, maze.numOfRows*zoom);
            g.drawLine(maze.numOfColumns*zoom, 0, maze.numOfColumns*zoom, maze.numOfRows*zoom);
            g.setColor(DotColor);
            for (Dot d:maze.getDots()) {
                g.fillOval(d.getPlace().column*zoom+zoom/4, d.getPlace().row*zoom+zoom/4, zoom/2, zoom/2);
            }
            if (entered == true) {
                g.setColor(Color.BLUE);
                g.fill3DRect((maze.numOfColumns - 1)*zoom + 5, (maze.numOfRows - 1)*zoom + 5, zoom - 10, zoom - 10, true);
            }
        }           
        else g.drawString("The Maze is not created yet!", 10, 10);
    }
    
    public void setMaze(Maze maze) {
        this.maze = maze;
    }

    public int getZoom() {
        return zoom;
    }

    public void setBorderColor(Color borderColor) {
        this.borderColor = borderColor;
    }

    public void setDotColor(Color DotColor) {
        this.DotColor = DotColor;
    }

    public void setBackgroundColor(Color BackgroundColor) {
        this.BackgroundColor = BackgroundColor;
    }

    public void setEntered(boolean entered) {
        this.entered = entered;
    } 
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
